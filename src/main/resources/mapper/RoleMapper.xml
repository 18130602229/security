<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bglemon.blue.taste.dao.RoleDao">
  <resultMap id="BaseResultMap" type="com.bglemon.blue.taste.domain.Role">
    <result column="id" jdbcType="INTEGER" property="id" />
    <result column="role" jdbcType="VARCHAR" property="role" />
    <result column="role_type" jdbcType="VARCHAR" property="roleType" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="deleted" jdbcType="BIT" property="deleted" />
  </resultMap>
  <sql id="Base_Column_List">
    id,role, role_type, description, create_time, update_time, deleted
  </sql>
  <insert id="insert"  useGeneratedKeys="true" keyProperty="id"  parameterType="com.bglemon.blue.taste.domain.Role">
    insert into auth_role (role,
      description, create_time)
    values ( #{role,jdbcType=VARCHAR},
      #{description,jdbcType=VARCHAR}, now())
  </insert>
  <select id="find" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" />
    from auth_role
  </select>

  <resultMap id="RoleWithPermission" type="com.bglemon.blue.taste.domain.Role">
    <result column="id" jdbcType="INTEGER" property="id" />
    <result column="role" jdbcType="VARCHAR" property="role" />
    <result column="role_type" jdbcType="VARCHAR" property="roleType" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="deleted" jdbcType="BIT" property="deleted" />
    <collection property="permissions" ofType="com.bglemon.blue.taste.domain.Permission">
      <result column="pid" jdbcType="INTEGER" property="id" />
      <result column="permission" jdbcType="VARCHAR" property="permission" />
      <result column="type" jdbcType="INTEGER" property="type" />
      <result column="parent_id" jdbcType="INTEGER" property="parentId" />
      <result column="pPermission" jdbcType="VARCHAR" property="description" />
      <result column="url" jdbcType="VARCHAR" property="url" />
    </collection>
    <!-- 通用查询映射结果 -->
  </resultMap>

  <update id="delete" parameterType="java.lang.Integer">
    update auth_role
    set deleted =1
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getAll" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from auth_role
    where deleted = 0 and role_type != 0
  </select>
  <select id="selectRoleById" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from auth_role
    where id = #{id}
  </select>
  <select id="getRoleByUserId" resultMap="RoleWithPermission" parameterType="int">
    SELECT r.*
    from auth_user u,auth_role r,auth_user_role ur
    <where>
      u.id=#{id,jdbcType=INTEGER}
      and ur.user_id = u.id
      and ur.role_id = r.id
      and u.deleted=0
    </where>
  </select>
  <select id="getRole" resultMap="RoleWithPermission" parameterType="java.lang.String">
    SELECT
    <include refid="Base_Column_List" />
    from auth_role r
    <where>
      <if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(role)">
      r.role = #{role,jdbcType=VARCHAR} AND
      </if>
      r.role != "admin" AND
      r.deleted=0
      order by id desc
    </where>
  </select>
  <select id="exist" resultType="boolean">
    SELECT
    count(*)
    from auth_role
    <where>
      <if test="id != null">
        id != #{id} and
      </if>
      role = #{role,jdbcType=VARCHAR} AND
      deleted=0
    </where>
  </select>
 <!-- <select id="getRole" resultMap="RoleWithPermission" parameterType="java.lang.String">
    SELECT
    r.*,
    p.id as pid,
    p.permission,
    p.type,
    p.parent_id,
    p.description as pPermission,
    p.url
    from auth_permission p,auth_role r,auth_role_permission rp
    <where>
      <if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(role)">
       1 = 1 AND r.role = #{role,jdbcType=VARCHAR} AND
      </if>
      r.role != "root" AND
      r.id=rp.role_id AND
      p.id=rp.permission_id AND
      p.deleted=0
    </where>
  </select>-->
  <select id="selectRoleByIdWithPermission" resultMap="RoleWithPermission" parameterType="java.lang.Integer">
    SELECT
    r.*,
    p.id as pid,
    p.permission,
    p.type,
    p.parent_id,
    p.description as pPermission,
    p.url
    from auth_permission p,auth_role r,auth_role_permission rp
    <where>
      r.id=#{id} AND
      r.id=rp.role_id AND
      p.id=rp.permission_id AND
      r.deleted=0 AND
      p.type = 1
    </where>
  </select>
  <update id="edit" parameterType="com.bglemon.blue.taste.vo.RoleVO">
    update auth_role
    <trim prefix="set" suffixOverrides=",">
      <if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(role)">
        role = #{role},
      </if>
      <if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(description)">
        description = #{description},
      </if>
    </trim>
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>